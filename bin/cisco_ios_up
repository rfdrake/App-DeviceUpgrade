#!/usr/bin/perl

use strict;
use warnings;
no warnings 'uninitialized';
use Expect;
use Getopt::Long;
use YAML::XS qw (LoadFile Dump);
use Const::Fast;
use v5.10; # for say

$Expect::Log_Stdout=1;
my $exp = Expect->new;
my $defaults = [];
my $config = {};
my $codes = [];
my @default_protected_files = ( 'config.txt', 'private-config', 'private-config.text',
                                'multiple-fs', 'config.text', 'vlan.dat', 'root-cert');

my %protected_files = map { $_ => 1 } @default_protected_files;

__PACKAGE__->main() unless caller;

sub usage {
    my $version = eval { require App::DeviceUpgrade; return $App::DeviceUpgrade::VERSION; };
    my $usage = qq {
    cisco_ios_up version $version
    Usage: cisco_ios_up [flags] <hostname>

        toggle flags:
            --interactive
            --delete
            --verify
            --archive
            --squeeze
            --force
            --debug

        arguments:
            --server
            --tftpsrv
            --dir
            --protocol
            --code
            --device
            --bootdev
            --bootflash
            --ftpuser
            --ftppass
    };
    $usage =~ s/^    //mg;
    return $usage;
}

sub _get_options {
    GetOptions (
        "interactive+"          => \$config->{interactive},
        "delete!"               => \$config->{delete},
        "squeeze!"              => \$config->{squeeze},
        "format!"               => \$config->{format},
        "server|tftpsrv=s"      => \$config->{server},
        "dir=s"                 => \$config->{dir},
        "protocol=s"            => \$config->{proto},
        "code=s"                => \$config->{code},
        "verify!"               => \$config->{verify},
        "device=s"              => \$config->{device},
        "bootdev=s"             => \$config->{bootdev},
        "bootflash=s"           => \$config->{bootflash},
        "archive!"              => \$config->{archive},
        "ftpuser=s"             => \$config->{ftpuser},
        "ftppass=s"             => \$config->{ftppass},
        "force!"                => \$config->{force},
        "debug!"                => \$config->{debug},
        "version!"              => \$config->{version},
    );
}

sub load_config {
    my ($file, $path) = @_;
    my $xdg = $ENV{XDG_CONFIG_HOME} || "$ENV{HOME}/.config";
    $file ||= 'types.yaml';
    $path ||= [ "$xdg/deviceupgrader/$file", "/etc/deviceupgrader/$file" ];
    push(@$path, $ENV{CISCOIOSUP_RC}) if (defined($ENV{CISCOIOSUP_RC}));

    foreach my $conf (@$path) {
        say "Considering $conf" if ($config->{debug});
        if (-r $conf) {
            return LoadFile($conf);
        } elsif (-r "$conf.yaml") {
            return LoadFile("$conf.yaml");
        }
    }
}

sub find_type {
    my ($t, $proc) = @_;
    for(@$codes) {
        my ($type) = keys(%$_);
        my $value = $_->{$type};
        say "Considering $t =~ $type, $proc eq $value->{proc}" if ($config->{debug});
        next if (defined($proc) && defined($value->{proc}) && ($proc ne $value->{proc}));
        return $value if ($t =~ $type);
    }
    return;
}

sub send_verify {
    my ($image) = @_;
    $exp->send("verify /md5 $image\r");
    $exp->expect(30,
             [ qr/\./ => sub { exp_continue; } ],
             [ qr/#/ => sub { } ],
             [ timeout => sub { die "*** TIMEOUT in VERIFY\n"; } ]);
}

sub wait_for_download {
    $exp->expect(600,
        [ qr/Erase (slot\d+|flash): before copying\? \[confirm\]/ => sub { $exp->send("n"); exp_continue } ],
        [ qr/Destination filename/ => sub { $exp->send("\r"); exp_continue } ],
        [ qr/Accessing|\!|extracting.*/ => sub { exp_continue } ],
        [ qr/#/ => sub { } ],
        [ timeout => sub { die "*** TIMEOUT while TFTP\n"; } ]);
}


sub get_version {
    my ($flashsize,$proc);
    my $type = "unknown";
    my $ver = "unknown";

    $exp->send("sh ver\r");

    $exp->expect(100,
           [ qr/System image file is "(\S+)"/ => sub { $ver = ($exp->matchlist)[0]; exp_continue; } ],
           [ qr/[Cc]isco (\S+)\s+\((.*?)\).*?with \d+K/ => sub { $proc = ($exp->matchlist)[1]; $type = ($exp->matchlist)[0]; exp_continue; } ],
           # override for cisco 6500 where they get the proc type wrong
           [ qr/(\S+) CPU at \d+Mhz/ => sub { $proc = ($exp->matchlist)[0]; exp_continue; } ],
           [ qr/Running default software/ => sub { } ],
           [ qr/(\S+)K bytes of processor board System flash \(Read\/Write\)/
                => sub { $flashsize = ($exp->matchlist)[0]; exp_continue; } ],
           # this is normally the last line of sh ver
           [ "Configuration register" => sub { if ($type eq "unknown" || $ver eq "unknown") { exp_continue; } } ],
           [ timeout => sub { die "*** Timed out processing sh ver\n"; } ],
           [ eof => sub { die "Unexpected eof\n"; } ],
    );

    return ($ver, $type, $proc, $flashsize);
}

# because this is recursive and returns arrays it has to be evaluated and
# "die" when something goes wrong (or you accept death as the consequences of
# failure)
sub remote_dir {
    my ($target, $ios, $norecursive) = @_;
    my $path = $target;
    # strip device name from the path
    $path =~ s/^\S+://;
    my @files;
    my @dirs;

    die if (!defined($ios));

    # needed to make sure the previous remote_dir command doesn't cause this
    # one to match '#' or something.
    $exp->clear_accum();
    $exp->send("dir $target\r");
    $exp->expect(100,
            # matching flags, date or <no date>, time offset or space, filename
            [ qr/\s+\d+\s+(\S{4})\s+\d+\s+(\w{3}\s+\d+\s+\d{4}\s+\d+:\d+:\d+|<no date>)(\s+[\+\-]\d+:\d+\s+|\s+)(\S+)/ =>
                sub {   my $file = ($exp->matchlist)[3];
                        my $flags = ($exp->matchlist)[0];
                        if ($file eq $ios && !$config->{force}) {
                            print "Staged version current.\n";
                            die;
                        }
                        if ($flags =~ /^d/ && $norecursive) {
                            push(@dirs, "$target/$file/");
                        } else {
                            push(@files, "$path$file");
                        }
                        exp_continue;
                    }
            ],
            [ qr/#/ => sub { } ],
            [ timeout => sub { die "*** Timeout at dir $target\n"; } ]
    );

    # this has to happen after the current directory parsing is complete
    for(@dirs) {
        push(@files, remote_dir($_, $ios, $norecursive));
    }

    return @files;

}

sub format_dev {
    my $device = shift;
    $exp->send("format $device:\r");
    $exp->expect(100,
        [ qr/Format operation may take a while. Continue\?  \[confirm\]/ => sub { $exp->send("y"); exp_continue; } ],
        [ qr/Format operation will destroy all data in "\S+"\.  Continue\?  \[confirm\]/ => sub { $exp->send("y"); exp_continue; } ],
        [ qr/#/ => sub { } ],
        [ timeout => sub { die "*** Timeout at delete file\n"; } ] );
}

sub delete_files {
    my ($device, $norecursive) = @_;
    my @files = @_;

    for (@files) {
        next if ($protected_files{$_});
        if (!$norecursive) {
            $exp->send("delete /recursive /force $device:$_\r");
        } else {
            $exp->send("delete $device:$_\r");
        }
        $exp->expect(100,
            [ qr/Examine files in directory/ => sub { $exp->send("y"); exp_continue } ],
            [ qr/Delete filename/ => sub { $exp->send("\r"); exp_continue } ],
            [ qr/Delete.*\[confirm\]/ => sub { $exp->send("y"); exp_continue } ],
            [ qr/#/ => sub { } ],
            [ timeout => sub { die "*** Timeout at delete file\n"; } ] );
    }
}

sub squeeze {
    my $device = shift;

    $exp->send("squeeze $device:\r");
    $exp->expect(100,
        [ qr/All deleted files will be removed. Continue\? \[confirm\]/ => sub { $exp->send("y"); exp_continue } ],
        [ qr/Squeeze operation may take a while. Continue\? \[confirm\]/ => sub { $exp->send("y"); exp_continue } ],
        [ qr/#/ => sub { } ],
        [ timeout => sub { die "*** Timeout at squeeze\n"; } ] );
}


sub upload {
    my ($values,$ios,$device,$files,$format) = @_;

    my $url = "$values->{proto}://";
    if ($values->{proto} eq "ftp") {
        $url .= "$values->{ftpuser}:$values->{ftppass}\@";
    }
    $url .= "$values->{server}/$values->{dir}/$ios";

    if ($values->{archive}) {
        $exp->send("archive download-sw /overwrite $url\r");
        wait_for_download();
    } else {
        format_dev($device) if ($format);
        delete_files($device, $values->{no_recursive}, @$files) if ($values->{delete});
        squeeze($device) if ($values->{squeeze});

        $exp->send("copy $url $device:\r");
        wait_for_download();
        send_verify("$device:$ios") if ($values->{verify});
    }
}

sub main {
    _get_options();
    die usage . "\n" if (scalar @ARGV == 0 || $config->{version});

    $defaults = load_config('defaults');
    $codes = load_config('types');

    # some defaults if they didn't put them in the defaults file
    $defaults->{proto} ||= 'tftp';
    $defaults->{device} ||= 'flash';
    $defaults->{logincmd} ||= 'clogin';

    HOST: for (@ARGV) {
        my $host = $_;
        my $prompt = "";
        $exp->soft_close() if ($exp->pid());
        $exp = Expect->spawn("$defaults->{logincmd} $host");
        $exp->expect(15,
               [ qr/(\S+)#/ => sub { $prompt = ($exp->matchlist)[0]; } ],
               [ timeout => sub { die "*** Timed out in Connecting to $host\n"; } ]);

        $exp->send("term len 0\r");

        my ($ver, $type, $proc, $flashsize) = get_version();

        # values is the copy of configuration.
        my $values = $defaults;

        my $model = find_type($type, $proc);
        if (defined($model)) {
            # add things from the determined model, these have middle priority
            @{$values}{ keys %$model } = values %$model;
        }

        # add things from the CLI, these have highest priority.  Don't overwrite
        # if value=undef
        foreach my $key ( keys %$config ) {
            next if (!defined($config->{$key}));
            $values->{$key}=$config->{$key};
        }

        my $ios = $values->{code};
        my $archive  = $values->{archive};
        my $device = $values->{device};
        my $bootflash = $values->{bootflash};
        my $bootdev = $values->{bootdev};

        if (!defined($ios)) {
            print "Unknown device type $type.  No IOS available\n";
            $exp->send("exit\r");
            $exp->soft_close();
            next HOST;
        }

        if (defined($values->{flashsize}) && $flashsize < $values->{flashsize}) {
            my $needed = $values->{flashsize};
            print "Flash isn't large enough to support code ($flashsize < $needed)\n";
            exit;
        }


        # get rid of everything prior to the last /
        $ver =~ s/(flash|slot0|disk[0-9])://;
        $ver =~ s#.*/(\S+)#$1#;

        $exp->expect(100, '-re', '#');

        my @files;
        if (($ver eq $ios || ($archive && $ver eq $archive)) && !$values->{force}) {
            print "Version already current.\n";
        } else {
            eval { @files = remote_dir("$device:", $ios, $values->{no_recursive}) };

            if (!($@)) {
                upload($values, $ios, $device, \@files, $values->{format});
            }
        }

        my @bootfiles;
        eval { @bootfiles = remote_dir("$bootdev:", $bootflash, $values->{no_recursive}); };
        if (!($@)) {
            upload($values, $bootflash, $bootdev, \@bootfiles, 0);
        }

        $exp->send("reload\ry") if ($values->{reload});
        $exp->send("exit\r");
        $exp->soft_close();
    }

}

