#!/usr/bin/expect --
set router "[lindex $argv 0]"
set code "[lindex $argv 1]"
set crc "[lindex $argv 2]"
set platform "[lindex $argv 3]"
set proto "[lindex $argv 4]"
set tftpserver "65.182.46.211"

if { $router == "" } {
   send_user "Usage: stage <router> <code> <crc> \[platform\] \[proto\]\n";
   exit;
}


# default to GSR/ftp
if { $platform == "" } { set platform "12000" }
if { $proto == "" } { set proto "ftp" }

source ~/.tacrc
set timeout -1

set username $tac_user
set passwd $tac_pswd


spawn telnet $router
expect {
    "Host key not found" { send "yes\r"; exp_continue }
    "HOST IDENTIFICATION" {
         send "yes\r";
         set sshdir "$env(HOME)/.ssh"
         exec cat $sshdir/known_hosts | grep -v $router > $sshdir/kn.new
         exec mv $sshdir/kn.new $sshdir/known_hosts
         exp_continue
     }
     "Username: " { send "$username\r"; exp_continue }
     "Password: " { send "$passwd\r" }
     "password: " { send "$passwd\r" }
}

expect \#
send "sh flash\r" 
#          filenum deleted?     img/unk   crc          seek      nlen    len
expect { 
   -re "\[0-9] +\[D-E\.]+ +\[a-z]+ +(\[A-Z0-9]+) +\[A-Z0-9]+ +\[0-9]+ +\[0-9]+ \[A-Za-z]+ \[0-9]+ \[0-9]+ ..:..:.. (\[a-z0-9A-Z\.\-]+)" {
       set newcrc $expect_out(1,string);
       set name $expect_out(2,string);
       if { $name == $code && $newcrc == $crc } {
          # two %%'s means warning.  Three means error
          send_user "\n\n%% $router - Name and CRC found.  exiting\n"
          exit
       }
       exp_continue
   }
   "\#" { }
}

send "format slot0:\r"
expect "Format operation may" 
send "yy"
set timeout 59
# Hack to make sure router doesn't kick us off for inactivity
expect {
   "Enter volume ID" { send "\r"; exp_continue }
   timeout { send " "; exp_continue}
   "\#" { }
}

send "copy $proto: flash\r"
expect {
  "Address or name of remote host" { send "$tftpserver\r"; exp_continue }
  "Source username" { send "noc\r"; exp_continue }
  "Source filename" { send "ios/$platform/$code\r"; exp_continue } 
  "Destination filename" { send "\r" }
}


expect {
   timeout { send " "; exp_continue}
   "\#" { }
}

send "sh flash\r"

set found 0
expect { 
   -re "\[0-9] +\[D-E\.]+ +\[a-z]+ +(\[A-Z0-9]+) +\[A-Z0-9]+ +\[0-9]+ +\[0-9]+ \[A-Za-z]+ \[0-9]+ \[0-9]+ ..:..:.. (\[a-z0-9A-Z\.\-]+)" {
       set newcrc $expect_out(1,string);
       set name $expect_out(2,string);
       if { $name == $code } {
          if { $newcrc != $crc } {
             send_user "\n\n%%% $router - Error: CRC does not match on new staged code\n"; 
          } 
          set found 1              
       }
       exp_continue
   }
   "\#" { }
}

if { $found == 0 } { 
   send_user "\n\n%%% $router - Error: Code not found after staging\n"
}

send "exit\r"
wait
exit
